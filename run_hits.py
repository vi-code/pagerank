
# coding: utf-8


"""Â© 2018 Rajkumar Pujari All Rights Reserved

- Original Version

    Author: Rajkumar Pujari
    Last Modified: 10/12/2018

"""



import json
import numpy as np
import argparse



def run_hits(graph, E=0.15, eps=0.05):
    outlinks = graph
    inlinks = {}
    
    #Build inlinks matrix
    for n1 in outlinks:
        for n2 in outlinks[n1]:
            if n2 in inlinks:
                inlinks[n2].append(n1)
            else:
                inlinks[n2] = [n1]
    
    hub_scores = {}
    auth_scores = {}
    
    #Initialize hub scores
    for n1 in outlinks:
        if len(outlinks[n1]) > 0:
            hub_scores[n1] = 0
    for n1 in hub_scores:
        hub_scores[n1] = 1.0 / len(hub_scores)
    
    #Initialize authority scores
    for n1 in inlinks:
        if len(inlinks[n1]) > 0:
            auth_scores[n1] = 0
    for n1 in auth_scores:
        auth_scores[n1] = 1.0 / len(auth_scores)
        
    #HITS loop
    num_iter = 0
    while True:
        new_hub_scores = {}
        new_auth_scores = {}
        
        #Computing new hub scores
        for n1 in hub_scores:
            new_hub_scores[n1] = ((1 - E) / len(hub_scores)) + (E * np.sum([auth_scores[n2] / len(inlinks[n2]) for n2 in outlinks[n1]]))
        
        #Computing new authority scores
        for n1 in auth_scores:
            new_auth_scores[n1] = ((1 - E) / len(auth_scores)) + (E * np.sum([hub_scores[n2] / len(outlinks[n2]) for n2 in inlinks[n1]]))
        
        #Checking convergence condition
        exit_loop = True
        for n1 in hub_scores:
            if np.abs(new_hub_scores[n1] - hub_scores[n1]) / hub_scores[n1] >= eps:
                exit_loop = False
                break
        
        if exit_loop:
            for n1 in auth_scores:
                if np.abs(new_auth_scores[n1] - auth_scores[n1]) / auth_scores[n1] >= eps:
                    exit_loop = False
                    break
                    
        hub_scores = new_hub_scores
        auth_scores = new_auth_scores
        
        num_iter += 1
        
        if exit_loop:
            break
        
    return hub_scores, auth_scores, num_iter


if __name__ == '__main__':
    arg_parser = argparse.ArgumentParser(description=__doc__, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    
    arg_parser.add_argument('--E', help='weight parameter', 
                  type=float, default=0.15)
    
    arg_parser.add_argument('--epsilon', help='convergence detection parameter', 
                  type=float, default=0.05)
    
    arg_parser.add_argument('--adj_list', help='path to the adjacency list file (JSON)',
                 type=str, default='/homes/cs473/project2/adj_list.json')
    
    arg_parser.add_argument('--url_dict', help='path to URL to ID mapping file (JSON)',
                 type=str, default='/homes/cs473/project2/url_dict.json')
    
    arg_parser.add_argument('--url_dict_reverse', help='path to ID to URL mapping file (JSON)',
                 type=str, default='/homes/cs473/project2/url_dict_reverse.json')
    
    arg_parser.add_argument('--output_path', help='path to the HITS output file (will be generated by this script)',
                 type=str, default='./hub_auth_scores.json')
   
    arg_parser.add_argument('--query_url', help='URL for which hub and authority scores need to be output',
                 type=str, default='none')

    arg_parser.add_argument('--k', help='number of hubs and authorities (top-k) for which the scores should be printed',
                 type=int, default=5)

    args = arg_parser.parse_args()
    
    adj_list = json.load(open(args.adj_list, 'r'))
    url_dict = json.load(open(args.url_dict, 'r'))
    url_dict_reverse = json.load(open(args.url_dict_reverse, 'r'))
    
    hub_scores, auth_scores, num_hits_iter = run_hits(adj_list, E=args.E, eps=args.epsilon)
        
    res_dict = {}
    res_dict['hub_scores'] = hub_scores
    res_dict['auth_scores'] = auth_scores
    res_dict['num_hits_iter'] = num_hits_iter
    open(args.output_path, 'w').write(json.dumps(res_dict))

    if args.query_url is not 'none':
        print('Query URL: ' + args.query_url)
        if args.query_url in url_dict and url_dict[args.query_url] in hub_scores:
            print('Hub Score: ' + str(round(hub_scores[url_dict[args.query_url]], 7)))
        else:
            print('Hub Score: 0')
        if args.query_url in url_dict and url_dict[args.query_url] in auth_scores:
            print('Authority Score: ' + str(round(auth_scores[url_dict[args.query_url]], 7)))
        else:
            print('Authority Score: 0')


    if args.k > 0:
        #Print top-k hub scores
        hub_sc = [(url_dict_reverse[id_], round(hub_scores[id_], 7)) for id_ in hub_scores]
        sorted_hub_scores = sorted(hub_sc, key=lambda x:x[1], reverse=True)
        print('\nTop-' + str(args.k) + ' hubs:')
        for tup in sorted_hub_scores[:args.k]:
            print(str(tup[1]) + '\t' + tup[0])
        
        #Print top-k authority scores
        print('\nTop-' + str(args.k) + ' authorities:')
        auth_sc = [(url_dict_reverse[id_], round(auth_scores[id_], 7)) for id_ in auth_scores]
        sorted_auth_scores = sorted(auth_sc, key=lambda x:x[1], reverse=True)
        for tup in sorted_auth_scores[:args.k]:
            print(str(tup[1]) + '\t' + tup[0])

else:
    pass

